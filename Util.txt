Diferença entre SOAP e REST: SOAP é um protocolo formal com regras estritas e maior overhead,
enquanto REST é uma abordagem arquitetural mais simples, flexível e eficiente para comunicação
via web.

Definição: Simple Object Access Protocol (SOAP) e Representational State Transfer (REST).

Para utilizar um protocolo HTTP: 5 regras.
1. Dê a todas as coisas um identificador [URL].
2. Utilize protocolo HTTP para definir as ações e suas respostas[HTTP].
3. Recursos com múltiplas representações [MIME].
4. Comunique sem estado [Stateless].
5. Vincule as coisas [links].


Principais protocolos:
200 (OK): Requisição bem-sucedida, retorna os dados solicitados.
201 (Created): Recurso criado com sucesso, retorna o recurso e a URI (ex.: via Location).
202 (Accepted): Requisição aceita para processamento, mas não concluída.
204 (No Content): Requisição bem-sucedida, sem dados no corpo da resposta.
400 (Bad Request): Requisição inválida, erro no formato ou dados enviados.
401 (Unauthorized): Autenticação necessária ou falhou.
404 (Not Found): Recurso solicitado não encontrado.
500 (Internal Server Error): Erro inesperado no servidor.


Criação das entidades:
Utilizar a anotação @Entity e @Table(name = "cliente")
Cliente, utilizando lombok para getters e setters (e construtores?).
Anotações referenciando as colunas nos banco de dados em cada atributo:
    Id: @Id e @GeneratedValue(strategy =  GenerationType.IDENTITY)
    Atributos quaisquer: @Column(nullable = false)
    Tem outras também importantes como:

No DTO:
Criar os atributos, com getters e setters gerados pelo lombok.
Utilizar as anotações para validação como:
    @NotNull: utilizado para qualquer tipo de dado que não possa ser nulo.
    @NotEmpty e @NotBlank: utilizados para qualquer String que não possa ser vazia (meio iguais).


Criação do repository:
No repository, utilizar a anotação @Repository permite que deixemos de lado o CRUD básico sendo necessário apenas
implementar consultas personalizadas. Algumas dessas consultas podem ser estruturadas automaticamente pelo JPA.
Para isso basta utilizar as nomenclaturas padrões para estruturas os métodos. Exemplos:
- Palavras-chave: findBy, getBy.
- Condições: containing, equals, between.
- Condições lógicas: and, or.
- Ordenação: desc, asc.
Na declaração da classe "public interface ClienteRepository extends JpaRepository<Cliente, Integer>", pode-se dizer
que o ClienteRepository herda da interface JpaRepository que recebe dois parâmetros: a entidade e o identificador único
desta entidade. Essa herança traz os métodos CRUD básicos (save, findById, findAll, delete). O "update" fica por conta
do "save", caso passado o parâmetro 'id' na requisição. Caso não seja passado, o "save" realiza o "create".


Criação do service:
Necessário utilizar a anotação @Service. A primeira declaração deve ser a injeção da dependência do repository:
    @Autowired: faz com que o service receba os dados do repository. Em outras palavras remove a necessidade de um
    construtor, por exemplo.

Criação do controller:
Anotar com:
    @Controller: indica que é um Controller;
    @RequestMapping("/cliente") indicando o end-point.

    @Autowired: instaciar as dependências Service da mesma forma que o Service faz com o Repository.

    @PostMapping: insert;
    @PutMapping: update;
    @GetMapping: findAll;
    @GetMapping("{id}"): findById;
    @DeleteMapping("{id}"): para deletar;

A partir daqui começa a ficar paia:
No insert:
    @RequestBody @Valid ProdutoRequestDTO produtoRequestDTO:
        Recebe um objeto ProdutoRequestDTO no corpo da requisição (em JSON).
        A anotação @Valid ativa a validação dos campos do DTO (ex.: @NotNull, @NotBlank).

    UriComponentsBuilder builder: É usado para criar a URL do recurso recém-criado (Cliente).
    URI uri = builder.path("/cliente/{id}").buildAndExpand(cliente.getId()).toUri():
        Gera uma URL como http://localhost:8080/cliente/123.

    Retorno ResponseEntity<Cliente>: Retorna uma resposta HTTP com status 201 Created.



